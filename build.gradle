buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://repo.spongepowered.org/maven" }
        jcenter()
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
group mod_group
version mod_version

apply plugin: 'net.minecraftforge.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'net.minecraftforge.gradle'

    group mod_group
    version mod_version

    //encoding
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
    repositories {
        mavenCentral()
    }
    minecraft {
        mappings channel: 'snapshot', version: '20171003-1.12'
    }
    dependencies {
        minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
        //global libs
        compileOnly project(":").fileTree(dir: 'libs', include: ['*.jar'])
        api project(":").fileTree(dir: 'libs-impl', include: ['.jar'])
        //local libs
        api fileTree(dir: 'libs-impl', include: ['.jar'])
        implementation 'io.github.classgraph:classgraph:4.8.104'

        //annotations
        compileOnly 'org.projectlombok:lombok:1.18.24'
        compileOnly 'org.jetbrains:annotations:23.0.0'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.jetbrains:annotations:23.0.0'
    }
    //replace placeholders from gradle.properties
    processResources {
        filesMatching('**/*.yml') {
            project.properties.each { propertyKey, propertyValue ->
                if (propertyValue instanceof String) {
                    filter {
                        it.replace("\${${propertyKey}}", propertyValue)
                    }
                }
            }
        }
        filesMatching('**/*.json') {
            project.properties.each { propertyKey, propertyValue ->
                if (propertyValue instanceof String) {
                    filter {
                        it.replace("\${${propertyKey}}", propertyValue)
                    }
                }
            }
        }
        filesMatching('**/*.info') {
            project.properties.each { propertyKey, propertyValue ->
                if (propertyValue instanceof String) {
                    filter {
                        it.replace("\${${propertyKey}}", propertyValue)
                    }
                }
            }
        }
    }
}
task copyOutputJars(type: Copy) {
    doFirst {
        // Delete existing JARs in the destination folder
        delete "$buildDir/OUTPUT"
    }
    // Ensure this task runs after the submodule's jar is built
    dependsOn ':gtw-mod-client:build'
    dependsOn ':gtw-mod-server:build'

    // Define the source and destination of the copy
    from "$projectDir/gtw-mod-client/build/libs", "$projectDir/gtw-mod-server/build/libs"
    into "$buildDir/OUTPUT"

    // Optionally, you can specify a pattern to copy only specific JARs
    include "${mod_name}-client-${mod_version}.jar"
    include "${mod_name}-server-${mod_version}.jar"
}

tasks.build.dependsOn(copyOutputJars)